version: "3"

services:
  db:
    image: postgres
    container_name: server_db
    env_file: ./db/db.env
    restart: always
    ports:
      - "5432:5432"
    secrets:
      - db-password
    volumes:
      - ./db/ddl:/docker-entrypoint-initdb.d/
      - pgdata:/var/lib/postgresql/data
    user: postgres
    healthcheck:
      test: ["CMD-SHELL", "pg_isready"]
      interval: 5s
      timeout: 10s
      retries: 5
    networks:
      - venora
    hostname: db

  db-accessor-api:
    build: ./db-accessor-api
    environment:
      FLASK_ENV: development
    env_file: ./db/db.env
    secrets:
      - db-password
    depends_on:
      - db
    networks:
      - venora
    ports:
      - "5001:80"
    hostname: "db-accessor"

  server: &server
    env_file: "./server/server.env"
    build:
      context: ./server/
      dockerfile: Dockerfile
    volumes:
      - ./server:/srv
      - ./SSL/db-accessor-api/:/srv/SSL/db-accessor-api/
    ports:
      - 9393:9393
      - 9394:9394
    depends_on:
      - db-accessor-api
    networks:
      - venora
    hostname: "venora-server"
    cap_add:
      - SYS_PTRACE
    security_opt:
      - seccomp:unconfined
    # restart: always

  # docker build --build-arg SUBMODULE_ACCESS_TOKEN=${{ secrets.SUBMODULE_ACCESS_TOKEN }}
  client-backend:
    build:
      context: client/ # Needs access to client/backend/ and client/library/
      dockerfile: ./backend/Dockerfile
    # environment:
    # SUBMODULE_ACCESS_TOKEN: /run/secrets/submodule_access_token
    # FLASK_ENV: production
    #   FLASK_APP: backend/app.py
    #   DATABASE_URL: postgres:// [username]:[password]@db:5432/[database]
    volumes:
      - ./SSL/server/:/client/SSL/server/
      - ./client/backend:/app/backend # Volume is just for development, hot reload
      # - ./client/library:/app/library
    secrets:
      - submodule_access_token
    ports:
      - "5000:5000"
    networks:
      - venora
      # - isolated
    # depends_on:
    # - server

  client-frontend:
    build:
      context: ./client/frontend
      target: dev
    ports:
      - "80:80"
      - "3000:3000"
    volumes:
      - ./client/frontend:/app
      - /app/node_modules
    environment:
      - CHOKIDAR_USEPOLLING=true
    depends_on:
      - client-backend
    networks:
      - venora
      # - isolated
    stdin_open: true

  # docker-compose run --rm -i -t client
  # client:
  #   build: client/
  #   # depends_on:
  #   #   - server
  #   stdin_open: true
  #   volumes:
  #     - ./SSL/server/:/client/SSL/server/
  #   tty: true
  #   networks:
  #     - isolated

volumes:
  pgdata:
secrets:
  db-password:
    file: ./db/secrets/password.txt
  submodule_access_token:
    file: ./secrets/submodule_access_token.txt

# Until I figure out a way to automate this connection a little better (maybe hostname instead of IP for connect?)
# To view network for container IPs (for connections)
# docker inspect venora_isolated
networks:
  isolated:
    driver: bridge
  venora:
    driver: bridge
