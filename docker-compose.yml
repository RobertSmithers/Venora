version: "3"

services:
  db:
    image: postgres
    container_name: server_db
    env_file: ./db/db.env
    restart: always
    ports:
      - "5432:5432"
    secrets:
      - db-password
    volumes:
      - ./db/ddl:/docker-entrypoint-initdb.d/
      - pgdata:/var/lib/postgresql/data
    user: postgres
    healthcheck:
      test: ["CMD-SHELL", "pg_isready"]
      interval: 5s
      timeout: 10s
      retries: 5
    networks:
      - isolated
    hostname: db

  db-accessor-api:
    build: ./db-accessor-api
    environment:
      FLASK_ENV: development
    env_file: ./db/db.env
    secrets:
      - db-password
    depends_on:
      - db
    networks:
      - isolated
    ports:
      - "5000:80"
    hostname: "db-accessor"

  server: &server
    env_file: "./server/server.env"
    build:
      context: ./server/
      dockerfile: Dockerfile
    volumes:
      - ./server:/srv
    ports:
      - 9393:9393
      - 9394:9394
    depends_on:
      - db-accessor-api
    networks:
      - isolated
    cap_add:
      - SYS_PTRACE
    security_opt:
      - seccomp:unconfined
    # restart: always

  # docker-compose run --rm -i -t client
  client:
    build: client/
    # depends_on:
    #   - server
    stdin_open: true
    tty: true
    networks:
      - isolated

volumes:
  pgdata:
secrets:
  db-password:
    file: ./db/secrets/password.txt

# Until I figure out a way to automate this connection a little better (maybe hostname instead of IP for connect?)
# To view network for container IPs (for connections)
# docker inspect venora_isolated
networks:
  isolated:
    driver: bridge
